# HGD Autogunk
AC_INIT([hgd], [0.6-current], [vext01@gmail.com, me92@kent.ac.uk])
: ${CFLAGS="-O2"}
AC_CONFIG_HEADERS([config.h])

AC_LANG_C
AC_PROG_MAKE_SET
AC_HEADER_STDC

#ALL_TARGETS="hgdc"
ALL_TARGETS=""
INSTALL_TARGETS="install-hgdc install-readme install-man-hgd-proto install-example-client"

# we need the install prefix at compile time
if test "${prefix}" = "NONE"; then
	prefix=/usr/local
fi
CFLAGS="${CFLAGS} -DPREFIX='\"${prefix}\"'"

# optional external libs
AC_ARG_WITH([python], AS_HELP_STRING([--without-python],
	    [Ignore presence of python and disable it]))
AC_ARG_WITH([python], AS_HELP_STRING([--with-python=<version>],
	    [Build with specific version of Python]))

AC_ARG_WITH([libconfig], AS_HELP_STRING([--without-libconfig],
	    [Ignore presence of libconfig and disable it]))

AC_ARG_WITH([taglib], AS_HELP_STRING([--without-taglib],
	    [Ignore presence of taglib and disable it]))

# conditional compilation of server
AC_ARG_ENABLE([server], AS_HELP_STRING([--disable-server],
	    [Dont build server components]))
AC_ARG_ENABLE([debug], AS_HELP_STRING([--enable-debug],
	    [Enable debug sysmbols]))
AC_ARG_ENABLE([nchgdc], AS_HELP_STRING([--enable-nchgdc],
	    [Enable EXPERIMENTAL and INCOMPLETE curses client]))

# experimental nchgdc
AS_IF([test "x$enable_nchgdc" = "xyes"],
    [ALL_TARGETS="${ALL_TARGETS} nchgdc"],
    []
)

# debug
AS_IF([test "x${enable_debug}" = "xyes"], [
	CFLAGS="${CFLAGS} -g"
	SYMBOLS="Yes"
], [
	SYMBOLS="No"
])

AH_TEMPLATE(HAVE_LIBCONFIG, "defined if we are building with libconfig support")
AH_TEMPLATE(HAVE_TAGLIB, "defined if we are building with taglib support")
AH_TEMPLATE(HAVE_PYTHON, "defined if we are building with python support")

# Figure out if we can use -Wall, GCC < 4 does not have this
AC_MSG_CHECKING([-Wall])
SAVE_CFLAGS=${CFLAGS}
CFLAGS="${CFLAGS} -Wall"
AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM([[]], [[return 1;]])],
        [AC_MSG_RESULT([yes])],
   	[
	 	AC_MSG_RESULT([no])
		CFLAGS=${SAVE_CFLAGS}
	]
)

# SERVER DEPS
AS_IF([test "x$enable_server" != "xno"], [

	ALL_TARGETS="${ALL_TARGETS} hgd-netd"
	INSTALL_TARGETS="${INSTALL_TARGETS} install-hgd-netd install-hgd-playd install-hgd-admin install-example-server"

	# server just cant work without sqlite
	PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.6.22])

	# taglib
	AS_IF([test "x$with_taglib" != "xno"], 
	     [PKG_CHECK_MODULES([TAGLIB], [taglib_c >= 1.6],
				[have_taglib=yes], [have_taglib=no])], [have_taglib=no])

	AS_IF([test "x$have_taglib" = "xyes"],
		[AC_DEFINE(HAVE_TAGLIB)],
		[AS_IF([test "x$with_taglib" = "xyes"],
			[AC_MSG_ERROR([taglib requested but not found])])
	])

	# python is only in hgd-playd at the moment.
	# check for python manually, as we can't find a portable way
	# we accept 2.6 and 2.7 for now
	if test "x${with_python}" = "x"; then
		py_config_search="python2.7-config python2.6-config python-config"
	else
		py_config_search=python${with_python}-config
	fi

	AS_IF([test "x$with_python" != "xno"], [

	       for i in ${py_config_search}; do
		       AC_MSG_CHECKING([$i])
		       if test -n "`which $i 2> /dev/null`"; then
			       AC_MSG_RESULT([yes])
			       PYTHON_CONFIG=$i
			       break;
		       fi
		       AC_MSG_RESULT([no])
		       have_python=no
	       done

	       if test -n "${PYTHON_CONFIG}"; then
		       PYTHON_LDFLAGS="`$PYTHON_CONFIG --ldflags` -L`$PYTHON_CONFIG --prefix`/lib"
		       PYTHON_CFLAGS=`$PYTHON_CONFIG --cflags`
		       have_python=yes
	       fi
	       ], [have_python=no])

	AS_IF([test "x$have_python" = "xyes"], [
		AC_DEFINE(HAVE_PYTHON)
		ALL_TARGETS="${ALL_TARGETS} hgd-mk-pydoc"
		INSTALL_TARGETS="${INSTALL_TARGETS} install-pydoc install-man-hgd-scripting install-py-lib"
	], [AS_IF([test "x$with_python" = "xyes"],
		[AC_MSG_ERROR([python requested but not found])])
	])
], [])


# SHARED DEPS
# If readpassphrase() is not in libc, it is in libbsd (linux)
AC_CHECK_FUNC([readpassphrase],,
	      [PKG_CHECK_MODULES([BSD], [libbsd >= 0.2.0])])

# ssl always needed, hashing / crypto
PKG_CHECK_MODULES([SSL], [openssl >= 0.9.8])

PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.10, libevent_openssl >= 2.0.10])

# libconfig
AS_IF([test "x$with_libconfig" != "xno"], 
	[PKG_CHECK_MODULES([LIBCONFIG],[libconfig >= 1.3.2],
		[have_libconfig=yes], [have_libconfig=no])], [have_libconfig=no])

AS_IF([test "x$have_libconfig" = "xyes"],
      [AC_DEFINE(HAVE_LIBCONFIG)],
      [AS_IF([test "x$with_libconfig" = "xyes"],
             [AC_MSG_ERROR([libconfig requested but not found])
      ])
])

# where we are building will go into the python class path
CFLAGS="${CFLAGS} -DBUILD_DIR='\"`pwd`\"'"

# and where to pick up installed systemwide python support
CFLAGS="${CFLAGS} -DDATAROOTDIR='\"${datarootdir}\"'"

# as we did this manually, we have to substitute manually
AC_SUBST([PYTHON_CFLAGS])
AC_SUBST([PYTHON_LDFLAGS])
AC_SUBST([prefix])
AC_SUBST([ALL_TARGETS])
AC_SUBST([INSTALL_TARGETS])

AC_OUTPUT([Makefile])
 
AC_MSG_NOTICE([
                   j#000000000000000000000000#00000000000000
                   j#00000000000000000Y*99- "~!?HN#000000000
                   j#00000000000009^-. --  .:.... u@#0000000
                   j#00000000000P`. ... .:x,;.=:_..:40000000
                   j#0000000000P..... .=,jXd44XGdXa;:4000000
                   j#000000000F .. . .:uxOOXXXXXXXOG;4000000
                   j#00000000# -. ...=x+!)_=x==xx=?*@:>@:000000
                   j#00000000 ;.. .:=!-====xv==jx=xx=+P00000
                   j#0000000I.: . ._jn=n=xxxxcx%3g%@:>@=>&00000
                   j#0000000:..o;::=xxnxXnxxu2x!3On3qW&00000
                   j#0000000;.:3(::=+@:>@%%333O33=+3+33OW000000
                   j#00000001..?na;:==%333O!x=%%%@:>@x=44000000
                   j#0000000L.. -~`::=%%%3333uuu333uuW000000
                   j#00000000{... ...:==%%%3333XOO3O34000000
                   j#0000000F . . ..-.::+=+++@:>@%%3%3%~=#00000
                   j#000000#(.. ... ;:::::;:=====;/...?Q0000
                   j#000000A . . . .=+=:+x=xx=xxxO(...:+N000
                   j#00000#I.:......:+===%33%333OO;.....:W00
                   j#000000i. _,-... ++=+xx%33OO"~......j000
                   j#000000AW??... . :+x@:>@x%3"'....:.-.:.:4#0
                   j#0000#0P~.    . ..=%@:>@@:>@~.... ....-.---.?9
                   j#000P'.  . ... ,..=X`........ ...:.:.:.:
                   j#P^. .. . ....:%x,?r--......... ..-.:.:: 
])

# XXX move inside checks, no need for separate AS_IF
AS_IF([test "x$have_python" != "xyes"],
	EXTERNAL_OPTIONALS_DISABLED="${EXTERNAL_OPTIONALS_DISABLED} python"
    , EXTERNAL_OPTIONALS_ENABLED="${EXTERNAL_OPTIONALS_ENABLED} python")
AS_IF([test "x$have_libconfig" != "xyes"],
	EXTERNAL_OPTIONALS_DISABLED="${EXTERNAL_OPTIONALS_DISABLED} libconfig"
    , EXTERNAL_OPTIONALS_ENABLED="${EXTERNAL_OPTIONALS_ENABLED} libconfig")
AS_IF([test "x$have_taglib" != "xyes"],
	EXTERNAL_OPTIONALS_DISABLED="${EXTERNAL_OPTIONALS_DISABLED} taglib"
    , EXTERNAL_OPTIONALS_ENABLED="${EXTERNAL_OPTIONALS_ENABLED} taglib")

AC_MSG_NOTICE([
=============================
Components to build   : ${ALL_TARGETS}
Enabled optional deps : ${EXTERNAL_OPTIONALS_ENABLED}
Disabled optional deps: ${EXTERNAL_OPTIONALS_DISABLED}
Install targets       : ${INSTALL_TARGETS}
Debug symbols         : ${SYMBOLS}
=============================])

AS_IF([test "x$have_python" != "xyes"],
	[], #true
      	AC_MSG_NOTICE([NOTE: Python scripting backend is EXPERIMENTAL!]))

AS_IF([test "x${enable_nchgdc}" = "xyes"],
      AC_MSG_NOTICE([NOTE: nchgdc is EXPERIMENTAL!],
      []))
